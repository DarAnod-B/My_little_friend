import json
from assistant.commands import load_commands
from assistant.modules.nlp.intent_parser import IntentParser
from assistant.utils.logger import logger

class CommandHandler:
    def __init__(self):
        self.commands = load_commands()
        self.intent_parser = IntentParser()

    async def handle(self, user_input):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É"""
        # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
        command = self.commands.get(user_input.lower())
        if command:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command.name}")
            return await command.execute() if hasattr(command, "execute") else command.execute()

        # 2Ô∏è‚É£ –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ‚Äì –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        intent = self.intent_parser.predict_intent(user_input)
        if intent and intent in self.commands:
            logger.info(f"üß† –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: {intent}")
            return await self.commands[intent].execute()

        logger.warning(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ '{user_input}' –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É."
    