import pyaudio
import wave
import struct
import math
import time

from assistant.utils.logger import logger
from assistant.utils.config import Config


class Recorder:
    def __init__(self):
        self.RATE = 16000  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        self.CHANNELS = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ (–º–æ–Ω–æ)
        self.FORMAT = pyaudio.paInt16  # –§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö
        self.CHUNK = 1024  # –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
        self.TIMEOUT_LENGTH = 1.0  # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–∏—à–∏–Ω—ã
        self.MAX_RECORD_LENGTH = 20 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        self.THRESHOLD = 70000 # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RMS
        self.FILE_PATH = Config.COMMAND_FILE

        self.p = pyaudio.PyAudio()
        self.stream = self.p.open(format=self.FORMAT, channels=self.CHANNELS, 
                                  rate=self.RATE, input=True, frames_per_buffer=self.CHUNK)
        

    def _rms(self, frame):
        count = len(frame) // 2
        shorts = struct.unpack(f"{count}h", frame)
        sum_squares = sum(sample * sample for sample in shorts)
        return math.sqrt(sum_squares / count) * 1000
    
    def calibrate_threshold(self, duration=1):
        """
        –ò–∑–º–µ—Ä—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ñ–æ–Ω–æ–≤–æ–≥–æ —à—É–º–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ä–æ–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (THRESHOLD).
        duration ‚Äî –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
        """
        logger.info("üîä –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —à—É–º–∞...")
        noise_levels = []

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º 1 —Å–µ–∫—É–Ω–¥—É —Ñ–æ–Ω–æ–≤–æ–≥–æ —à—É–º–∞
        for _ in range(int(self.RATE / self.CHUNK * duration)):  
            data = self.stream.read(self.CHUNK)
            rms_value = self._rms(data)
            noise_levels.append(rms_value)

        avg_noise = sum(noise_levels) / len(noise_levels)  # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RMS
        threshold = avg_noise * 1.5  # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 1.5 –¥–ª—è –∑–∞–ø–∞—Å–∞

        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥: {threshold:.2f}")
        return threshold

    def record(self):
        logger.info("üé§ –ó–∞–ø–∏—Å—å –∫–æ–º–∞–Ω–¥—ã...")
        rec = []
        start_time = time.time()
        current = start_time
        end = start_time + self.TIMEOUT_LENGTH

        while current - start_time <= self.MAX_RECORD_LENGTH:  # –ó–∞–ø–∏—Å—å –Ω–µ –¥–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥
            data = self.stream.read(self.CHUNK)
            rms_value = self._rms(data)

            logger.info(f"üîπ RMS: {rms_value:.2f} (–ü–æ—Ä–æ–≥: {self.THRESHOLD:.2f})")

            if rms_value >= self.THRESHOLD:
                end = time.time() + self.TIMEOUT_LENGTH  # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –≥–æ–ª–æ—Å –≥—Ä–æ–º–∫–∏–π

            rec.append(data)
            current = time.time()

            if current > end:  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
                break  

        with wave.open(self.FILE_PATH, "wb") as wf:
            wf.setnchannels(self.CHANNELS)
            wf.setsampwidth(self.p.get_sample_size(self.FORMAT))
            wf.setframerate(self.RATE)
            wf.writeframes(b"".join(rec))

        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!")